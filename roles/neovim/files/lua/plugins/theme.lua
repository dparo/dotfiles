local function theme_overrides()
    vim.o.guicursor =
        [[n:block-Cursor,v:hor10-vCursor,i:ver100-iCursor,n-c-ci-cr-sm-v:blinkon0,i:blinkon10,i:blinkwait10,c-ci-cr:block-cCursor,c:block-cCursor]]

    vim.api.nvim_set_hl(0, "Todo", { bg = "none" })
    vim.api.nvim_set_hl(0, "Fixme", { bg = "none" })
    vim.api.nvim_set_hl(0, "XXX", { bg = "none" })
    -- vim.api.nvim_set_hl(0, "Visual", { fg = "#ffffff", bg = "#0000ff", ctermbg = "blue", ctermfg = "white" })

    if false then
        -- Avoid thick lines in vertical split generated by some themes
        vim.api.nvim_set_hl(0, "VertSplit", { link = "default", fg = "none", bg = "none", ctermfg = "none", ctermbg = "none" })
    end

    if false then
        vim.api.nvim_set_hl(0, "DiagnosticSignError", { ctermfg = "red", fg = "#FF9999" })
        vim.api.nvim_set_hl(0, "DiagnosticSignWarning", { ctermfg = "yellow", fg = "#FFFF99" })
        vim.api.nvim_set_hl(0, "DiagnosticSignInformation", { ctermfg = "yellow", fg = "#FFFF99" })
        vim.api.nvim_set_hl(0, "DiagnosticSignHint", { ctermfg = "green", fg = "#99FF99" })

        vim.api.nvim_set_hl(0, "DiagnosticUnderlineError", { link = "DiagnosticSignError" })
        vim.api.nvim_set_hl(0, "DiagnosticUnderlineWarning", { link = "DiagnosticSignWarning" })
        vim.api.nvim_set_hl(0, "DiagnosticUnderlineInformation", { link = "DiagnosticSignInformation" })
        vim.api.nvim_set_hl(0, "DiagnosticUnderlineHint", { link = "DiagnosticSignHint" })

        vim.api.nvim_set_hl(0, "DiagnosticUnderlineError", {
            cterm = { undercurl = true },
            ctermbg = "none",
            ctermfg = "none",
            undercurl = true,
            sp = "#FF0000",
            fg = "none",
            bg = "none",
        })
        vim.api.nvim_set_hl(0, "DiagnosticUnderlineWarning", {
            cterm = { undercurl = true },
            ctermbg = "none",
            ctermfg = "none",
            undercurl = true,
            sp = "#FFFF00",
            fg = "none",
            bg = "none",
        })
        vim.api.nvim_set_hl(0, "DiagnosticUnderlineInformation", {
            cterm = { undercurl = true },
            ctermbg = "none",
            ctermfg = "none",
            undercurl = true,
            sp = "#FFFF00",
            fg = "none",
            bg = "none",
        })
        vim.api.nvim_set_hl(0, "DiagnosticUnderlineHint", {
            cterm = { undercurl = true },
            ctermbg = "none",
            ctermfg = "none",
            undercurl = true,
            sp = "#AAFFAA",
            fg = "none",
            bg = "none",
        })
    end

    -- Vscode colors for Cmp Completion window, Some themes do not set good defaults for this
    if false then
        vim.api.nvim_set_hl(0, "CmpItemAbbrDeprecated", { default, strikethrough = true, bg = "none", fg = "#808080" })
        vim.api.nvim_set_hl(0, "CmpItemAbbrMatch", { default, bg = "none", fg = "#569CD6" })
        vim.api.nvim_set_hl(0, "CmpItemAbbrMatchFuzzy", { default, bg = "none", fg = "#569CD6" })
        vim.api.nvim_set_hl(0, "CmpItemKindVariable", { default, bg = "none", fg = "#9CDCFE" })
        vim.api.nvim_set_hl(0, "CmpItemKindInterface", { default, bg = "none", fg = "#9CDCFE" })
        vim.api.nvim_set_hl(0, "CmpItemKindText", { default, bg = "none", fg = "#9CDCFE" })
        vim.api.nvim_set_hl(0, "CmpItemKindFunction", { default, bg = "none", fg = "#C586C0" })
        vim.api.nvim_set_hl(0, "CmpItemKindMethod", { default, bg = "none", fg = "#C586C0" })
        vim.api.nvim_set_hl(0, "CmpItemKindKeyword", { default, bg = "none", fg = "#D4D4D4" })
        vim.api.nvim_set_hl(0, "CmpItemKindProperty", { default, bg = "none", fg = "#D4D4D4" })
        vim.api.nvim_set_hl(0, "CmpItemKindUnit", { default, bg = "none", fg = "#D4D4D4" })
    end

    -- Nvim Web DevIcons might need to be re-called in a `Colorscheme`
    -- to re-apply cleared highlights if the color scheme changes
    local status_ok, nvim_web_devicons = pcall(require, "nvim-web-devicons")
    if status_ok then
        nvim_web_devicons.setup {}
    end
end

core.utils.augroup("USER_THEME_OVERRIDES", {
    { { "ColorScheme" }, { pattern = "*", callback = theme_overrides } },
})

local signs = {
    { name = "DiagnosticSignError", text = "", numhl = "" },
    { name = "DiagnosticSignWarn", text = "", numhl = "" },
    { name = "DiagnosticSignHint", text = "", numhl = "" },
    { name = "DiagnosticSignInfo", text = "", numhl = "" },
    { name = "DapBreakpoint", text = "", numhl = "DapBreakpoint" },
    { name = "DapStopped", text = "", numhl = "DapStopped" },
}

vim.diagnostic.config {
    underline = true,
    virtual_text = true,
    signs = signs,
    severity_sort = true,
}

for _, sign in ipairs(signs) do
    vim.fn.sign_define(sign.name, { texthl = sign.name, text = sign.text, numhl = "" })
end

local unused = {
    -- Theme configurations/generators
    { "rktjmp/lush.nvim" },
    { "tjdevries/colorbuddy.nvim" },

    { "dracula/vim", name = "dracula" },
    { "metalelf0/jellybeans-nvim", dependencies = { "rktjmp/lush.nvim" } },
    { "tjdevries/gruvbuddy.nvim", dependencies = { "tjdevries/colorbuddy.nvim" } },
    { "Th3Whit3Wolf/spacebuddy", dependencies = { "tjdevries/colorbuddy.nvim" } },
    {
        "marko-cerovac/material.nvim",
        config = function()
            vim.g.material_style = "darker"
            require("material").setup {
                custom_highlights = {
                    Special = "#FFFFFF",
                    SpecialChar = "#FFFFFF",
                    cSpecialCharacter = "#FFFFFF",
                    TSStringEscape = "#FFFFFF",
                    TSStringSpecial = "#FFFFFF",
                },
            }
        end,
    },
    { "navarasu/onedark.nvim" },

    { "arcticicestudio/nord-vim" },
    {
        "sainnhe/everforest",
        config = function()
            vim.g.everforest_background = "hard"
        end,
    },

    { "sainnhe/sonokai" },
    {
        "sainnhe/gruvbox-material",
        config = function()
            vim.g.gruvbox_material_background = "hard"
        end,
    },
    {
        "EdenEast/nightfox.nvim",
        config = function()
            require("nightfox").setup {
                options = {
                    dim_inactive = true,
                },
            }
        end,
    },

    { "tomasiser/vim-code-dark" },

    { "tomasr/molokai" },
    {
        "ellisonleao/gruvbox.nvim",
        config = function()
            vim.g.gruvbox_inverse = 0
            vim.g.gruvbox_contrast_dark = "hard"
            vim.g.gruvbox_contrast_light = "hard"
        end,
    },
    {
        "ayu-theme/ayu-vim",
        config = function()
            vim.g.ayucolor = "dark"
        end,
    },
    { "mhartington/oceanic-next" },
    {
        "folke/tokyonight.nvim",
        config = function()
            vim.g.tokyonight_style = "storm"
        end,
    },

    { "Everblush/everblush.nvim" },

    {
        "rebelot/kanagawa.nvim",

        config = function()
            require("kanagawa").setup {
                undercurl = true, -- enable undercurls
                commentStyle = { italic = false },
                functionStyle = {},
                keywordStyle = { italic = false },
                statementStyle = { bold = false },
                typeStyle = {},
                variablebuiltinStyle = { italic = false },
                specialReturn = true, -- special highlight for the return keyword
                specialException = true, -- special highlight for exception handling keywords
                transparent = false, -- do not set background color
                dimInactive = false, -- dim inactive window `:h hl-NormalNC`
                globalStatus = false, -- adjust window separators highlight for laststatus=3
                terminalColors = true, -- define vim.g.terminal_color_{0,17}
                theme = "default", -- Load "default" theme or the experimental "light" theme
            }
        end,
    },
}

return {
    {
        "catppuccin/nvim",
        lazy = false,
        priority = 1000,
        name = "catppuccin",
        config = function()
            if vim.o.termguicolors == true then
                vim.cmd [[colorscheme catppuccin-mocha]]
            end
        end,
    },
}
