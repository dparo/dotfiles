#!/usr/bin/env bash

cd "$HOME" || exit 1

set -x
config() {
    bspc config automatic_scheme longest_side
    bspc config top_padding 0
    bspc config bottom_padding 0


    bspc monitor -d 1 2 3 4 5 6 7 8 9 10

    bspc config remove_disabled_monitors true
    bspc config remove_unplugged_monitors true

    MONITORS="$(xrandr --listactivemonitors | tail -n +2 | awk {'print $4'})"
    PRIMARY=$(xrandr --query | grep " connected" | grep "primary" | cut -d" " -f1)

    M="$(echo "$MONITORS" | wc -l)"
    if test "$M" -eq 1; then
        bspc wm -O "$(echo "$MONITORS" | awk NR==1)"
        bspc monitor -d 1 2 3 4 5 6 7 8 9 10
    elif test "$M" -eq 2; then
        bspc wm -O "$(echo "$MONITORS" | awk NR==1)" "$(echo "$MONITORS" | awk NR==2)"
        bspc monitor "$(echo "$MONITORS" | awk NR==1)" -d 1 2 3 4 5
        bspc monitor "$(echo "$MONITORS" | awk NR==2)" -d 6 7 8 9 10
    elif test "$M" -eq  3; then
        bspc wm -O "$(echo "$MONITORS" | awk NR==1)" "$(echo "$MONITORS" | awk NR==2)" "$(echo "$MONITORS" | awk NR==3)"
        bspc monitor "$(echo "$MONITORS" | awk NR==1)" -d 1 2 3 4
        bspc monitor "$(echo "$MONITORS" | awk NR==2)" -d 5 6 7
        bspc monitor "$(echo "$MONITORS" | awk NR==3)" -d 8 9 10
    elif test "$M" -eq 4; then
        bspc wm -O "$(echo "$MONITORS" | awk NR==1)" "$(echo "$MONITORS" | awk NR==2)" "$(echo "$MONITORS" | awk NR==3)" "$(echo "$MONITORS" | awk NR==4)"
        bspc monitor "$(echo "$MONITORS" | awk NR==1)" -d 1 2 3
        bspc monitor "$(echo "$MONITORS" | awk NR==2)" -d 4 5 6
        bspc monitor "$(echo "$MONITORS" | awk NR==3)" -d 7 8
        bspc monitor "$(echo "$MONITORS" | awk NR==4)" -d 9 10
    elif test "$M" -eq 5; then
        bspc wm -O "$(echo "$MONITORS" | awk NR==1)" "$(echo "$MONITORS" | awk NR==2)" "$(echo "$MONITORS" | awk NR==3)" "$(echo "$MONITORS" | awk NR==4)" "$(echo "$MONITORS" | awk NR==5)"
        bspc monitor "$(echo "$MONITORS" | awk NR==1)" -d 1 2
        bspc monitor "$(echo "$MONITORS" | awk NR==2)" -d 3 4
        bspc monitor "$(echo "$MONITORS" | awk NR==3)" -d 5 6
        bspc monitor "$(echo "$MONITORS" | awk NR==4)" -d 7 8
        bspc monitor "$(echo "$MONITORS" | awk NR==5)" -d 9 10
    fi

    # mod1 is alt, mod4 is super (windows key)
    bspc config pointer_modifier mod1

    bspc config border_width 2
    bspc config window_gap 16

    # I would like this to be set to true. But the floating resize sucks dicks if this is enabled.
    bspc config honor_size_hints true

    bspc config ignore_ewmh_focus false
    bspc config ignore_ewmh_fullscreen none
    bspc config ignore_ewmh_struts false

    bspc config click_to_focus button1
    bspc config focus_follows_pointer true
    bspc config swallow_first_click true

    bspc config pointer_action2 resize_side
    bspc config pointer_action3 resize_corner

    bspc config split_ratio 0.5
    bspc config borderless_monocle true
    bspc config gapless_monocle true

    bspc rule -a URxvt:fzf-float state=floating
    bspc rule -a URxvt:float state=floating
    bspc rule -a URxvt:Fuzzy state=floating
    #bspc rule -a URxvt:calc state=floating

    bspc rule -a Zathura state=tiled
    bspc rule -a TelegramDesktop state=floating
    bspc rule -a Emacs state=tiled
    #bspc rule -a Gimp desktop='^8' state=floating follow=on
    #bspc rule -a Chromium desktop='^2'
    #bspc config focused_border_color \#ff0000
    #bspc config normal_border_color \#980c0c

    bspc config active_border_color "#313244"
    bspc config focused_border_color "#eba0ac"
    bspc config normal_border_color "#11111b"
    bspc config presel_feedback_color "#a6e3a1"
}

"${XDG_CONFIG_HOME:-$HOME/.config}/xorg/refresh-devices-settings.sh"

if test "$1" = "--config"; then
    config
else
    config


    "$XDG_CONFIG_HOME/polybar/launch.sh" &
    # systemctl --user start polybar

    autorandr --change

    ##
    ## Startup the programs (wait one second so that polybar and the notification daemon has enough time to startup)
    ##
    copyq &
    ~/opt/Telegram/Telegram -startintray &
fi
